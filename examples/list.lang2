type Node struct {
    value: int,
    next: *Node,
};

type List struct {
    head: *Node,
};

fn list_new(): List {
    return List:{
        head: __null__,
    };
}

fn list_push_front(list: *mut List, n: int) {
    let new_node = new Node:{
        value: n,
        next: list.head,
    };

    list.head := new_node;
}

fn list_pop_front(list: *mut List) {
    list.head := list.head.next;
}

fn _list_print(node: *Node) {
    if node.next <> __null__ {
        _list_print(node.next);
    }

    printnln(node.value);
}

fn list_print(list: *List) {
    if list.head <> __null__ {
        _list_print(list.head);
    }
}

let mut list = list_new();

list_push_front(&mut list, 1);
list_push_front(&mut list, 2);
list_push_front(&mut list, 3);
list_push_front(&mut list, 4);
list_push_front(&mut list, 5);
list_push_front(&mut list, 6);

list_pop_front(&mut list);
list_pop_front(&mut list);

list_print(&list);
