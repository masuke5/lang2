fn test_eq(name: string, expected: int, actual: int) {
    print(name);
    print(" => ");

    if expected == actual {
        printnln(actual);
    } else {
        print("expected:");
        printn(expected);
        print(", actual:");
        printnln(actual);
    }

    return 0;
}

fn test(name: string, ok: bool) {
    print(name);
    print(" => ");

    if ok {
        println("succeed");
    } else {
        println("failed");
    }

    return 0;
}

## literals ##

test_eq("zero", 0, 0);
test_eq("one", 1, 1);

## binary operators ##

test_eq("add", 9, 5 + 4);
test_eq("sub", 13, 20 - 7);
test_eq("mul", 2714195, 809 * 3355);
test_eq("div 1", 3, 9 / 3);
test_eq("div 2", 2, 8 / 3);
test_eq("priority", 18, 3 + 7 * 4 - 13);

let a = 3 + 35;
test("equal", 38 == 38);
test("not equal", 38 != 39);
test("less than", 35 < 39);
test("less than or equal", 38 <= 38);
test("greater than", 33 > 30);
test("greater than or equal", 93 >= 31);
test("and", true && true);
test("or", false || true);

## variable ##

let a = 3 + 35;
test_eq("binding", 38, a);

let b = 10;
{
    let b = 13;
}
test_eq("scope", 10, b);

let b = 30;

test_eq("shadowing", 30, b);

## function ##

test_eq("simple function", 30, add(14, 16));
test_eq("early return", 1000, early_return(3));
test_eq("fibonacci", 55, fib(10));

fn add(a: int, b: int): int {
    return a + b;
}

fn early_return(a: int): int {
    if a < 5 {
        return 1000;
    }

    return 500000;
}

fn fib(n: int): int {
    if n == 0 || n == 1 {
        return n;
    } else {
        return fib(n - 1) + fib(n - 2);
    }
}

## tuple ##

test_eq("tuple indexing 1", 3, (3, 8, 4, 9).0);
test_eq("tuple indexing 2", 9, (3, 8, 4, 9).3);
test_eq("tuple indexing 3", 8, (3, 8, 4, 9).1);

test_eq("nested tuple indexing", 132, ((52, 93012, 341), (5, 132), 63).1.1);
let tuple = ((52, 93012, 341), (5, 132, 9), 63);
test_eq("variable tuple indexing", 9, tuple.1.2);

test("function passed a tuple", tuple((5, 3, 8)));
# test_eq("function returning a tuple", 12, double((3, 6)).1);

fn tuple(t: (int, int, int)): bool {
    return t.0 == 5 && t.1 == 3 && t.2 == 8;
}

# fn double(t: (int, int)): (int, int) {
#     return (t.0 * 2, t.1 * 2);
# }
