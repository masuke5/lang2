arg-list = expr {"," expr} [","]

primary = number
        | id
        | id "(" [arg-list] ")"
        | "true"
        | "false"
        | "(" expr ")"

field = primary
      | field "." number
      | field "." identifier

factor = factor "*" primary
       | factor "/" primary
       | factor "%" primary

term = term "+" factor
     | term "-" factor

relational = term "<" term
           | term "=" term
           | term ">" term
           | term ">=" term

equality = relational "==" relational
         | relational "!=" relational

expr = equality


bind = "let" id [":" type] "=" expr ";"

return = "return" [expr] ";"

block = "{" {stmt} "}"

if = "if" expr block ["else" (block|if)]

while = "while" expr block

for = "for" id "in" expr block

expr-stmt = expr ";"

stmt = bind-stmt
     | return
     | block
     | if
     | while
     | for


param = id ":" type
param-list = param {"," param} [","]
func-def = "fn" id "(" [param-list] ")" [":" type] block


type-list = type {"," type} [","]
tuple-type = "(" type-list ")"

unit-type = "(" ")"

field = identifier ":" type
field-list = field {"," field} [","]
struct-type = "struct" "{" [field-list] "}"

type = id
     | tuple-type
     | unit-type
     | struct-type

type-decl = "type" identifier type


toplevel = stmt
         | func-def
         | type-decl

program = {toplevel}
