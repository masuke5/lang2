(* Expression *)

type_args = type {"," type} [","]
field = identifier ":" expr
fields = field {"," field} [","]

number_expr = number
variable = id
path = id {"::" id}
struct = (identifier | path) ":" "{" [fields] "}"
bool_literal = "true" | "false"
atom = "(" expr ")"
tuple = "(" expr {"," expr} [","] ")"
array = "[" expr ";" number "]"
block = "{" {stmt} [expr] "}"
if_expr = "if" expr expr ["else" expr]
primary
    = number_expr
    | variable
    | path
    | struct
    | bool_literal
    | atom
    | tuple
    | array
    | block
    | if_expr
field
    = primary
    | field "." number
    | field "." identifier
app = field "<" [type-args] ">"
subscript = (subscript | app) "[" expr "]"
call = (call | subscript) expr
unary = ("-" | "*" | "&" ["mut"] | "new" ["mut"]) call
factor = factor ("*" | "/" | "%") unary 
term = term ("+" | "-") factor
relational = term ("<" | "<=" | ">" | ">=") term
equality = relational ("=" | "<>") relational
and = and "&&" equality
or = or "||" and

expr = or

(* Statement *)

bind = "let" id [":" type] "=" expr ";"
return = "return" [expr] ";"
while = "while" expr block
for = "for" id "in" expr block
assign = expr ":=" expr
expr_stmt = expr ";"
stmt
    = bind
    | return
    | block
    | if
    | while
    | for
    | assign
    | expr_stmt
    | def

(* Definition *)

param = id ":" type
param_list = param {"," param} [","]
func_def = "fn" id "(" [param_list] ")" [":" type] block

type_params = identifier {"," identifier} [","]
type_def = "type" identifier ["<" type_params ">"] type

import_def = "import" path

def
    = func_def
    | type_def
    | import_def

(* Import *)

range
    = identfier
    | identfier "as" identifier
    | "{" import {"," import } [","] "}"
import = path "::" range

(* Type *)

tuple_type = "(" type {"," type} [","] ")"
unit_type = "(" ")"
primitive_type
    = "int"
    | "bool"
    | "string"

field = identifier ":" type
field_list = field {"," field} [","]
struct_type = "struct" "{" [field_list] "}"

pointer_type = "*" ["mut"] type
array_type = "[" type ";" number "]"
app_type = type "<" [type_args] ">"
arrow_type = type "->" type

type
    = id
    | tuple_type
    | unit_type
    | struct_type
    | primitive_type
    | pointer_type
    | arrow_type
    | app_type
    | arrow_type

(* Program *)

program = {stmt ";"}
